/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.com.tecnm.jdbc.chat;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JTextArea;

/**
 *
 * @author rgo19
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        this.setTitle("Servidor");
        initComponents();
        initComponents2();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(!(jTextField1.getText().length()==0 || jTextField1.getText().matches("^\\s+$") || ts == null)){ //Ley de Morgan
            ts.setMensaje(jTextField1.getText());
            jTextField1.setText("");
        }else{
            if(jTextField1.getText().matches("^\\s+$")){
                jTextField1.setText("");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public void initComponents2(){
        jTextField1.setText("");
        jTextArea1.setEditable(false);
        
        try {
            ts = new TextServer(jTextArea1,jButton1);
            thread = new Thread(ts);
            thread.start();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        Server s = new Server();
        s.setVisible(true);
    }
    private Thread thread;
    private TextServer ts;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
class TextServer implements Runnable{
    private JTextArea j;
    private JButton b;
    private ServerSocket ss;
    private Socket cs;
    private String mensaje;
    private static final int PORT = 1234;
    public TextServer(JTextArea j, JButton b) throws IOException {
        this.j = j;
        this.b = b;
        b.setEnabled(false);
        ss = new ServerSocket(PORT);
        cs = new Socket();
    }

    public void setMensaje(String mensaje) {
        this.mensaje = mensaje;
    }
    
    @Override
    public void run() {
        while (true) {
            try {
                mensaje = "";
                boolean romper = true;
                System.out.println("Esperando");
                cs = ss.accept();
                System.out.println("Conexion iniciada");
                DataOutputStream os = new DataOutputStream(cs.getOutputStream());
                DataInputStream is = new DataInputStream(cs.getInputStream());
                b.setEnabled(true);
                while (romper) {
                    Thread.sleep(50);
                    if (!mensaje.matches("^\\s+$") && mensaje.length() > 0) {
                        if (mensaje.equals("---quit---")) {
                            os.writeUTF(mensaje);
                            Thread.sleep(500);
                            os.close();
                            is.close();
                            System.exit(0);
                        } else {
                            j.setText(j.getText() + "[Servidor]: " + mensaje + "\n");
                            os.writeUTF(mensaje);
                            mensaje = "";
                        }

                    }
                    if (is.available() > 0) {
                        String var = is.readUTF();
                        if (var.equals("---quit---")) {
                            os.close();
                            is.close();
                            j.setText("");
                            romper = false;
                            continue;
                        } else {
                            j.setText(j.getText() + "[Cliente]: " + var + "\n");
                        }
                    }
                }
                b.setEnabled(false);
                os.close();
                is.close();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(TextServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
}